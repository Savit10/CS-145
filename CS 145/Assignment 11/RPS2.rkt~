#lang lazy
#lang lazy

(require "Gen.rkt")
(require "IOStream.rkt")

(define (RPS Player1 Player2)
  (define A (Player1 (history B)))
  (define B (Player2 (history A)))
  (playgame A B))

(define (count-moves seq)

  (define equal-rock? (lambda(x)(equal? x 'rock)))
  (define equal-scissors? (lambda(x)(equal? x 'scissors)))
  (define equal-paper? (lambda(x)(equal? x 'paper)))
  (define n 1000)
  (define rocks (count equal-rock? (take n seq)))
  (define scissors (count equal-scissors? (take n seq)))
  (define paper (count equal-paper? (take n seq)))

  (list rocks scissors paper)
  )

(define (max1 lst)
  (max (first lst) (second lst) (third lst)))
(define (min1 lst)
  (min (first lst) (second lst) (third lst)))

(define (bart opponent-history)
  (define (mymove other)
    'rock)
  (map mymove opponent-history))

(define (lisa opponent-history)
  (define (mymove other)
    (cond
      [(= 0 (max1 (count-moves opponent-history))) (car (shuffle (list 'rock 'paper 'scissors)))]
      [(= (max1 (count-moves opponent-history)) (car (count-moves opponent-history))) 'paper] ;If rock is played alot then play paper
      [else (car (shuffle (list 'rock 'paper 'scissors)))]
        )
    )
  (map mymove opponent-history))

(define (maggie opponent-history)
  (define (mymove other)
    (cond
      [(= 0 (max1 (count-moves opponent-history))) (car (shuffle (list 'rock 'paper 'scissors)))]
      [(= (min1 (count-moves opponent-history)) (second (count-moves opponent-history))) (car (shuffle (list 'rock 'paper 'scissors)))] ;If the least number of moves was 'scissors play randomly 
      [(= (max1 (count-moves opponent-history)) (car (count-moves opponent-history))) 'paper] ;If rock is played most then it will beat bart
      [(= (max1 (count-moves opponent-history)) (last (count-moves opponent-history))) 'scissors] ;If papper is played more play sicssors
      ))
  (map mymove opponent-history))

(define (champion opponent-history)
  (define (mymove other)
    (cond
      [(= 0 (max1 (count-moves opponent-history))) (car (shuffle (list 'rock 'paper 'scissors)))]
      [(= (max1 (count-moves opponent-history)) (second (count-moves opponent-history))) 'rock] ;If scissors is played alot then play rock
      [(= (max1 (count-moves opponent-history)) (car (count-moves opponent-history))) 'paper] ;If rock is played most then it will beat bart
      [(= (max1 (count-moves opponent-history)) (last (count-moves opponent-history))) 'scissors] ;If papper is played more play sicssors
      )
    )
  (map mymove opponent-history))

;(define (randomplay h)(rps))
;(max1 (count-moves (take 100 (rps))))
;(outstream (take 10 (RPS lisa maggie)))